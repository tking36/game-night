{"ast":null,"code":"import { ADD_WIN, SUB_WIN, PLAYER_LIST_REQUEST, PLAYER_LIST_SUCCESS, PLAYER_LIST_FAIL } from \"../constants/playerConstants\";\nconst initialState = {\n  loading: false,\n  players: [],\n  error: null\n};\nexport const winReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    players: []\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ADD_WIN:\n      return {\n        ...state,\n        players: state.players.map(player => player._id === action.payload._id ? action.payload : player)\n      };\n    case SUB_WIN:\n      return {\n        ...state,\n        players: state.players.map(player => player._id === action.payload._id ? action.payload : player)\n      };\n    default:\n      return state;\n  }\n};\n\n// Reducer function to handle loading player data\nexport const playerReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    loading: false,\n    error: null,\n    players: []\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case PLAYER_LIST_REQUEST:\n      return {\n        ...state,\n        loading: true\n      };\n    case PLAYER_LIST_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        players: action.payload\n      };\n    case PLAYER_LIST_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\n// import produce from \"immer\";\n// import { ADD_WIN, SUB_WIN, PLAYER_LIST_FAIL, PLAYER_LIST_SUCCESS, PLAYER_LIST_REQUEST} from \"../constants/playerConstants\";\n\n// export const playerReducer = (state = { players: [] }, action) => {\n//   switch (action.type) {\n//     case PLAYER_LIST_REQUEST:\n//       return { loading: true, players: [] };\n//     case PLAYER_LIST_SUCCESS:\n//       return { loading: false, players: action.payload };\n//     case PLAYER_LIST_FAIL:\n//       return {loading:false, error: action.payload };\n//     default:\n//       return state;\n//   }\n// };\n\n// export const winReducer = (state = { players: [] }, action) => {\n//   switch (action.type) {\n//     case ADD_WIN:\n//       return produce(state, (draftState) => {\n//         const player = draftState.players.find(\n//           (p) => p._id === action.payload._id\n//         );\n//         if (player) {\n//           player.wins += 1;\n//         }\n//       });\n//     case SUB_WIN:\n//       return produce(state, (draftState) => {\n//         const player = draftState.players.find(\n//           (p) => p._id === action.payload._id\n//         );\n//         if (player && player.wins > 0) {\n//           player.wins -= 1;\n//         }\n//       });\n//     default:\n//       return state;\n//   }\n// };","map":{"version":3,"names":["ADD_WIN","SUB_WIN","PLAYER_LIST_REQUEST","PLAYER_LIST_SUCCESS","PLAYER_LIST_FAIL","initialState","loading","players","error","winReducer","state","arguments","length","undefined","action","type","map","player","_id","payload","playerReducer"],"sources":["/Users/taylorking/dev/projects/redux/game-night/game/src/reducers/playerReducer.js"],"sourcesContent":["import { ADD_WIN, SUB_WIN, PLAYER_LIST_REQUEST, PLAYER_LIST_SUCCESS, PLAYER_LIST_FAIL } from \"../constants/playerConstants\";\n\nconst initialState = {\n  loading: false,\n  players: [],\n  error: null\n};\n\n\n  export const winReducer = (state = { players: [] }, action) => {\n    switch (action.type) {\n      case ADD_WIN:\n        return {\n          ...state,\n          players: state.players.map(player =>\n            player._id === action.payload._id ? action.payload : player\n          )\n        };\n      case SUB_WIN:\n        return {\n          ...state,\n          players: state.players.map(player =>\n            player._id === action.payload._id ? action.payload : player\n          )\n        };\n      default:\n        return state;\n    }\n  };\n  \n  // Reducer function to handle loading player data\n  export const playerReducer = (\n    state = { loading: false, error: null, players: [] },\n    action\n  ) => {\n    switch (action.type) {\n      case PLAYER_LIST_REQUEST:\n        return { ...state, loading: true };\n      case PLAYER_LIST_SUCCESS:\n        return { ...state, loading: false, players: action.payload };\n      case PLAYER_LIST_FAIL:\n        return { ...state, loading: false, error: action.payload };\n      default:\n        return state;\n    }\n  };\n\n\n\n\n// import produce from \"immer\";\n// import { ADD_WIN, SUB_WIN, PLAYER_LIST_FAIL, PLAYER_LIST_SUCCESS, PLAYER_LIST_REQUEST} from \"../constants/playerConstants\";\n\n// export const playerReducer = (state = { players: [] }, action) => {\n//   switch (action.type) {\n//     case PLAYER_LIST_REQUEST:\n//       return { loading: true, players: [] };\n//     case PLAYER_LIST_SUCCESS:\n//       return { loading: false, players: action.payload };\n//     case PLAYER_LIST_FAIL:\n//       return {loading:false, error: action.payload };\n//     default:\n//       return state;\n//   }\n// };\n\n// export const winReducer = (state = { players: [] }, action) => {\n//   switch (action.type) {\n//     case ADD_WIN:\n//       return produce(state, (draftState) => {\n//         const player = draftState.players.find(\n//           (p) => p._id === action.payload._id\n//         );\n//         if (player) {\n//           player.wins += 1;\n//         }\n//       });\n//     case SUB_WIN:\n//       return produce(state, (draftState) => {\n//         const player = draftState.players.find(\n//           (p) => p._id === action.payload._id\n//         );\n//         if (player && player.wins > 0) {\n//           player.wins -= 1;\n//         }\n//       });\n//     default:\n//       return state;\n//   }\n// };"],"mappings":"AAAA,SAASA,OAAO,EAAEC,OAAO,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,gBAAgB,QAAQ,8BAA8B;AAE3H,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE,EAAE;EACXC,KAAK,EAAE;AACT,CAAC;AAGC,OAAO,MAAMC,UAAU,GAAG,SAAAA,CAAA,EAAqC;EAAA,IAApCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;IAAEJ,OAAO,EAAE;EAAG,CAAC;EAAA,IAAEO,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACxD,QAAQC,MAAM,CAACC,IAAI;IACjB,KAAKf,OAAO;MACV,OAAO;QACL,GAAGU,KAAK;QACRH,OAAO,EAAEG,KAAK,CAACH,OAAO,CAACS,GAAG,CAACC,MAAM,IAC/BA,MAAM,CAACC,GAAG,KAAKJ,MAAM,CAACK,OAAO,CAACD,GAAG,GAAGJ,MAAM,CAACK,OAAO,GAAGF,MAAM;MAE/D,CAAC;IACH,KAAKhB,OAAO;MACV,OAAO;QACL,GAAGS,KAAK;QACRH,OAAO,EAAEG,KAAK,CAACH,OAAO,CAACS,GAAG,CAACC,MAAM,IAC/BA,MAAM,CAACC,GAAG,KAAKJ,MAAM,CAACK,OAAO,CAACD,GAAG,GAAGJ,MAAM,CAACK,OAAO,GAAGF,MAAM;MAE/D,CAAC;IACH;MACE,OAAOP,KAAK;EAAC;AAEnB,CAAC;;AAED;AACA,OAAO,MAAMU,aAAa,GAAG,SAAAA,CAAA,EAGxB;EAAA,IAFHV,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;IAAEL,OAAO,EAAE,KAAK;IAAEE,KAAK,EAAE,IAAI;IAAED,OAAO,EAAE;EAAG,CAAC;EAAA,IACpDO,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAEN,QAAQC,MAAM,CAACC,IAAI;IACjB,KAAKb,mBAAmB;MACtB,OAAO;QAAE,GAAGQ,KAAK;QAAEJ,OAAO,EAAE;MAAK,CAAC;IACpC,KAAKH,mBAAmB;MACtB,OAAO;QAAE,GAAGO,KAAK;QAAEJ,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAEO,MAAM,CAACK;MAAQ,CAAC;IAC9D,KAAKf,gBAAgB;MACnB,OAAO;QAAE,GAAGM,KAAK;QAAEJ,OAAO,EAAE,KAAK;QAAEE,KAAK,EAAEM,MAAM,CAACK;MAAQ,CAAC;IAC5D;MACE,OAAOT,KAAK;EAAC;AAEnB,CAAC;;AAKH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}