{"ast":null,"code":"import { ADD_WIN, SUB_WIN, PLAYER_LIST_REQUEST, PLAYER_LIST_SUCCESS, PLAYER_LIST_FAIL } from \"../constants/playerConstants\";\nimport axios from \"axios\";\nexport const getPlayers = () => async dispatch => {\n  try {\n    dispatch({\n      type: PLAYER_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(\"http://localhost:8000/api/players\");\n    dispatch({\n      type: PLAYER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PLAYER_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const addWin = player => async dispatch => {\n  try {\n    const updatedPlayer = {\n      ...player,\n      wins: player.wins + 1\n    };\n    const {\n      data\n    } = await axios.post(`http://localhost:8000/api/players/${player._id}`, updatedPlayer);\n    dispatch({\n      type: ADD_WIN,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const subWin = player => async dispatch => {\n  try {\n    const updatedPlayer = {\n      ...player,\n      wins: player.wins - 1\n    };\n    const {\n      data\n    } = await axios.post(`http://localhost:8000/api/players/${player._id}`, updatedPlayer);\n    dispatch({\n      type: SUB_WIN,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// export const winAction = (player) => (dispatch) => {\n//     dispatch({\n//         type: ADD_WIN,\n//         payload: {\n//             name: player.name,\n//             wins: ++player.wins,\n//             champion: player.champion,\n//         },\n//     });\n//     dispatch({\n//         type: SUB_WIN,\n//         payload: {\n//             name: player.name,\n//             wins: --player.wins,\n//             champion: player.champion,\n//         },\n//     });\n// }","map":{"version":3,"names":["ADD_WIN","SUB_WIN","PLAYER_LIST_REQUEST","PLAYER_LIST_SUCCESS","PLAYER_LIST_FAIL","axios","getPlayers","dispatch","type","data","get","payload","error","response","message","addWin","player","updatedPlayer","wins","post","_id","console","log","subWin"],"sources":["/Users/taylorking/dev/projects/redux/game-night/game/src/actions/playerActions.js"],"sourcesContent":["import { ADD_WIN, SUB_WIN, PLAYER_LIST_REQUEST, PLAYER_LIST_SUCCESS, PLAYER_LIST_FAIL} from \"../constants/playerConstants\";\nimport axios from \"axios\";\n\n\n\nexport const getPlayers = () => async (dispatch) => {\n    try {\n        dispatch({ type: PLAYER_LIST_REQUEST });\n        const { data } = await axios.get(\"http://localhost:8000/api/players\");\n        dispatch({\n            type: PLAYER_LIST_SUCCESS,\n            payload: data,\n        });\n        \n    } catch (error) {\n        dispatch({\n            type: PLAYER_LIST_FAIL,\n            payload:\n                error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message,\n        });\n    }\n};\n\nexport const addWin = (player) => async (dispatch) => {\n    try {\n        const updatedPlayer = {...player, wins: player.wins + 1};\n        const {data} = await axios.post(`http://localhost:8000/api/players/${player._id}`, updatedPlayer);\n        dispatch({ type:ADD_WIN, payload: data });\n    } catch (error) {\n        console.log(error)\n    }\n    };\n\n    export const subWin = (player) => async (dispatch) => {\n        try {\n            const updatedPlayer = {...player, wins: player.wins - 1};\n            const {data} = await axios.post(`http://localhost:8000/api/players/${player._id}`, updatedPlayer);\n            dispatch({ type:SUB_WIN, payload: data });\n        } catch (error) {\n            console.log(error)\n        }\n        }\n\n// export const winAction = (player) => (dispatch) => {\n//     dispatch({\n//         type: ADD_WIN,\n//         payload: {\n//             name: player.name,\n//             wins: ++player.wins,\n//             champion: player.champion,\n//         },\n//     });\n//     dispatch({\n//         type: SUB_WIN,\n//         payload: {\n//             name: player.name,\n//             wins: --player.wins,\n//             champion: player.champion,\n//         },\n//     });\n// }\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,OAAO,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,gBAAgB,QAAO,8BAA8B;AAC1H,OAAOC,KAAK,MAAM,OAAO;AAIzB,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EAChD,IAAI;IACAA,QAAQ,CAAC;MAAEC,IAAI,EAAEN;IAAoB,CAAC,CAAC;IACvC,MAAM;MAAEO;IAAK,CAAC,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,mCAAmC,CAAC;IACrEH,QAAQ,CAAC;MACLC,IAAI,EAAEL,mBAAmB;MACzBQ,OAAO,EAAEF;IACb,CAAC,CAAC;EAEN,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZL,QAAQ,CAAC;MACLC,IAAI,EAAEJ,gBAAgB;MACtBO,OAAO,EACHC,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAACK,OAAO,GACvCF,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAACK,OAAO,GAC3BF,KAAK,CAACE;IACpB,CAAC,CAAC;EACN;AACJ,CAAC;AAED,OAAO,MAAMC,MAAM,GAAIC,MAAM,IAAK,MAAOT,QAAQ,IAAK;EAClD,IAAI;IACA,MAAMU,aAAa,GAAG;MAAC,GAAGD,MAAM;MAAEE,IAAI,EAAEF,MAAM,CAACE,IAAI,GAAG;IAAC,CAAC;IACxD,MAAM;MAACT;IAAI,CAAC,GAAG,MAAMJ,KAAK,CAACc,IAAI,CAAE,qCAAoCH,MAAM,CAACI,GAAI,EAAC,EAAEH,aAAa,CAAC;IACjGV,QAAQ,CAAC;MAAEC,IAAI,EAACR,OAAO;MAAEW,OAAO,EAAEF;IAAK,CAAC,CAAC;EAC7C,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZS,OAAO,CAACC,GAAG,CAACV,KAAK,CAAC;EACtB;AACA,CAAC;AAED,OAAO,MAAMW,MAAM,GAAIP,MAAM,IAAK,MAAOT,QAAQ,IAAK;EAClD,IAAI;IACA,MAAMU,aAAa,GAAG;MAAC,GAAGD,MAAM;MAAEE,IAAI,EAAEF,MAAM,CAACE,IAAI,GAAG;IAAC,CAAC;IACxD,MAAM;MAACT;IAAI,CAAC,GAAG,MAAMJ,KAAK,CAACc,IAAI,CAAE,qCAAoCH,MAAM,CAACI,GAAI,EAAC,EAAEH,aAAa,CAAC;IACjGV,QAAQ,CAAC;MAAEC,IAAI,EAACP,OAAO;MAAEU,OAAO,EAAEF;IAAK,CAAC,CAAC;EAC7C,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZS,OAAO,CAACC,GAAG,CAACV,KAAK,CAAC;EACtB;AACA,CAAC;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}